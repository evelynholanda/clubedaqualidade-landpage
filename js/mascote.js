/**
 * Mascote Interativo 3D - Clube Qualidade
 * Sistema de mascote animado para landing page de QA e IA
 * Personalizado para Ana Evelyn e Pablo Andrade
 */

class MascoteIA {
    constructor(options = {}) {
        this.options = {
            // Frases espec√≠ficas do Clube Qualidade
            frases: [
                "Ol√°! Sou o assistente do Clube Qualidade! ü§ñ",
                "Precisa de ajuda para escolher um produto?",
                "Conhe√ßa nossos eBooks, Agentes IA e Mentorias!",
                "Quer saber mais sobre automa√ß√£o com IA?",
                "Ana Evelyn e Pablo est√£o aqui para te ajudar!",
                "Vamos transformar sua carreira em QA?",
                "Que tal come√ßar com um eBook de R$ 9,90?",
                "Nossos agentes IA podem otimizar 75% das suas tarefas!",
                "Primeira consulta de mentoria gratuita! üéì",
                "Pegue sua chave para o primeiro emprego em QA! üóùÔ∏è",
                "Especialistas em automa√ß√£o inteligente desde 2019!",
                "Transforme dados em insights valiosos!",
                "Acelere sua produtividade com nossos agentes!",
                "Descubra o poder da IA para seu neg√≥cio! üöÄ"
            ],
            frasesContextuais: {
                'index': [
                    "Bem-vindo ao Clube Qualidade! Como posso ajudar?",
                    "Conhe√ßa nossa expertise em QA e IA!",
                    "Ana e Pablo t√™m +8 anos de experi√™ncia combinados!",
                    "Pegue sua chave para o sucesso em QA! üóùÔ∏è"
                ],
                'produtos': [
                    "Qual categoria te interessa mais?",
                    "eBooks a partir de R$ 9,90!",
                    "Agentes IA que automatizam 80% das tarefas!",
                    "Mentorias personalizadas dispon√≠veis!",
                    "Precisa de ajuda para escolher?"
                ]
            },
            intervaloBalaoPadrao: 25000, // 25 segundos para n√£o ser intrusivo
            duracaoBalao: 5000, // 5 segundos
            posicao: 'bottom-right',
            autoIniciar: true,
            ...options
        };
        
        this.mascoteElement = null;
        this.balaoElement = null;
        this.timeoutId = null;
        this.intervalId = null;
        this.isInitialized = false;
        this.paginaAtual = this.detectarPagina();
        this.contadorCliques = 0;
        
        if (this.options.autoIniciar) {
            this.init();
        }
    }
    
    detectarPagina() {
        const url = window.location.pathname;
        if (url.includes('produtos.html') || url.includes('produtos')) {
            return 'produtos';
        }
        return 'index';
    }
    
    init() {
        if (this.isInitialized) return;
        
        this.criarMascote();
        this.configurarEventos();
        this.configurarEventosEspecificos();
        this.iniciarComportamentoAutomatico();
        this.isInitialized = true;
        
        console.log('ü§ñ Mascote Clube Qualidade inicializado com sucesso!');
        
        // Analytics de inicializa√ß√£o
        this.rastrearInteracao('mascote_inicializado', {
            pagina: this.paginaAtual,
            timestamp: new Date().toISOString()
        });
    }
    
    criarMascote() {
        // Criar container principal
        this.mascoteElement = document.createElement('div');
        this.mascoteElement.className = 'mascote-container';
        this.mascoteElement.id = 'mascoteIA';
        this.mascoteElement.setAttribute('aria-label', 'Assistente virtual do Clube Qualidade');
        
        // Aplicar posicionamento
        this.aplicarPosicionamento();
        
        // HTML do mascote com sistema de chat interativo
        this.mascoteElement.innerHTML = `
            <!-- Chat Container -->
            <div id="chatContainer" class="chat-container">
                <!-- Header do Chat -->
                <div class="chat-header">
                    <div class="chat-title">
                        <span class="chat-avatar">ü§ñ</span>
                        <div class="chat-info">
                            <strong>Assistente IA</strong>
                            <small>Clube Qualidade</small>
                        </div>
                    </div>
                    <button id="chatToggle" class="chat-toggle">
                        <span class="toggle-icon">‚àí</span>
                    </button>
                </div>
                
                <!-- √Årea de mensagens -->
                <div id="chatMessages" class="chat-messages">
                    <div class="message bot-message">
                        <div class="message-content">
                            Ol√°! üëã Como posso te ajudar hoje?
                        </div>
                    </div>
                </div>
                
                <!-- Menu de perguntas r√°pidas -->
                <div id="quickQuestions" class="quick-questions">
                    <button class="quick-btn" data-question="ebooks">üìö Qual eBook √© melhor?</button>
                    <button class="quick-btn" data-question="agentes">ü§ñ Como funcionam os agentes?</button>
                    <button class="quick-btn" data-question="precos">üí∞ Pre√ßos das mentorias?</button>
                    <button class="quick-btn" data-question="iniciante">üéØ Sou iniciante, por onde come√ßar?</button>
                    <button class="quick-btn" data-question="contato">üìû Quero falar com voc√™s</button>
                </div>
                
                <!-- Campo de input -->
                <div class="chat-input-container">
                    <input type="text" id="chatInput" class="chat-input" placeholder="Digite sua pergunta..." maxlength="200">
                    <button id="chatSend" class="chat-send">
                        <span>‚û§</span>
                    </button>
                </div>
                
                <!-- Indicador de digita√ß√£o -->
                <div id="typingIndicator" class="typing-indicator" style="display: none;">
                    <span>Ana est√° digitando</span>
                    <div class="typing-dots">
                        <span>.</span><span>.</span><span>.</span>
                    </div>
                </div>
            </div>
            
            <!-- Bal√£o de fala (modo compacto) -->
            <div class="balao-fala" id="balaoFala" role="status" aria-live="polite">
                Ol√°! Sou o assistente do Clube Qualidade! ü§ñ
            </div>
            
            <!-- Cabe√ßa do rob√¥ -->
            <div class="robo-cabeca">
                <!-- Antenas -->
                <div class="antena antena-esquerda"></div>
                <div class="antena antena-direita"></div>
                
                <!-- Olhos -->
                <div class="olhos">
                    <div class="olho"></div>
                    <div class="olho"></div>
                </div>
                
                <!-- Boca -->
                <div class="boca"></div>
            </div>
            
            <!-- Corpo do rob√¥ -->
            <div class="robo-corpo">
                <!-- Bra√ßos -->
                <div class="braco braco-esquerdo">
                    <div class="mao"></div>
                </div>
                <div class="braco braco-direito">
                    <div class="mao"></div>
                </div>
                
                <!-- Painel no peito com LEDs Clube Qualidade -->
                <div class="painel-peito">
                    <div class="led-status led-verde" title="Sistema ativo"></div>
                    <div class="led-status led-azul" title="IA conectada"></div>
                    <div class="led-status led-amarelo" title="Processando"></div>
                </div>
                
                <!-- Pernas -->
                <div class="perna perna-esquerda">
                    <div class="pe"></div>
                </div>
                <div class="perna perna-direita">
                    <div class="pe"></div>
                </div>
            </div>
            
            <!-- Badge de notifica√ß√£o -->
            <div class="notification-badge" id="notificationBadge">!</div>
        `;
        
        // Adicionar ao body
        document.body.appendChild(this.mascoteElement);
        
        // Referenciar elementos
        this.balaoElement = this.mascoteElement.querySelector('#balaoFala');
        this.chatContainer = this.mascoteElement.querySelector('#chatContainer');
        this.chatMessages = this.mascoteElement.querySelector('#chatMessages');
        this.chatInput = this.mascoteElement.querySelector('#chatInput');
        this.chatSend = this.mascoteElement.querySelector('#chatSend');
        this.chatToggle = this.mascoteElement.querySelector('#chatToggle');
        this.quickQuestions = this.mascoteElement.querySelector('#quickQuestions');
        this.typingIndicator = this.mascoteElement.querySelector('#typingIndicator');
        this.notificationBadge = this.mascoteElement.querySelector('#notificationBadge');
        
        // Inicializar chat
        this.initializeChat();
        this.initializeKnowledgeBase();
    }
    
    aplicarPosicionamento() {
        const posicoes = {
            'bottom-right': { bottom: '20px', right: '20px' },
            'bottom-left': { bottom: '20px', left: '20px' },
            'top-right': { top: '20px', right: '20px' },
            'top-left': { top: '20px', left: '20px' }
        };
        
        const pos = posicoes[this.options.posicao] || posicoes['bottom-right'];
        Object.assign(this.mascoteElement.style, pos);
    }
    
    configurarEventos() {
        // Evento de clique no avatar (abre/fecha chat)
        const robotHead = this.mascoteElement.querySelector('.robo-cabeca');
        robotHead.addEventListener('click', (e) => {
            e.preventDefault();
            this.toggleChat();
        });
        
        // Evento de hover no avatar
        robotHead.addEventListener('mouseenter', () => {
            this.aoHover();
        });
        
        // Evento de sa√≠da do hover
        robotHead.addEventListener('mouseleave', () => {
            this.aoSairHover();
        });
        
        // Eventos de toque para mobile
        robotHead.addEventListener('touchstart', (e) => {
            e.preventDefault();
            this.toggleChat();
        }, { passive: false });
    }
    
    configurarEventosEspecificos() {
        // Detectar scroll para mensagens contextuais
        let scrollTimeout;
        window.addEventListener('scroll', () => {
            clearTimeout(scrollTimeout);
            scrollTimeout = setTimeout(() => {
                this.onScroll();
            }, 1000);
        });
        
        // Detectar hover nos produtos (se existirem)
        const produtoCards = document.querySelectorAll('.product-card');
        produtoCards.forEach(card => {
            card.addEventListener('mouseenter', () => {
                this.onProdutoHover(card);
            });
        });
        
        // Detectar cliques em CTAs
        const ctaButtons = document.querySelectorAll('.buy-button, .btn-primary, .banner-cta');
        ctaButtons.forEach(button => {
            button.addEventListener('click', () => {
                this.onCTAClick(button);
            });
        });
    }
    
    onScroll() {
        const scrollPosition = window.scrollY;
        const windowHeight = window.innerHeight;
        
        // Mensagens baseadas na posi√ß√£o do scroll
        if (scrollPosition > windowHeight * 2 && !this.balaoElement.classList.contains('ativo')) {
            const frasesScroll = [
                "Viu algum produto interessante?",
                "Posso te ajudar a decidir!",
                "Que tal dar uma olhada nos eBooks?",
                "Os agentes IA s√£o incr√≠veis! ü§ñ"
            ];
            const frase = frasesScroll[Math.floor(Math.random() * frasesScroll.length)];
            this.mostrarBalao(frase);
        }
    }
    
    onProdutoHover(card) {
        const productTitle = card.querySelector('.product-title');
        if (productTitle) {
            const titulo = productTitle.textContent;
            let mensagem = "√ìtima escolha!";
            
            if (titulo.includes('Claude')) {
                mensagem = "Claude √© nosso best-seller! üåü";
            } else if (titulo.includes('Landing Page')) {
                mensagem = "Aprenda a criar p√°ginas que convertem!";
            } else if (titulo.includes('Maestro')) {
                mensagem = "Domine os testes mobile!";
            } else if (titulo.includes('JIRA')) {
                mensagem = "Automatize seus cen√°rios de teste!";
            } else if (titulo.includes('Swagger')) {
                mensagem = "APIs testadas automaticamente! üöÄ";
            }
            
            if (!this.balaoElement.classList.contains('ativo')) {
                this.mostrarBalao(mensagem, 3000);
            }
        }
    }
    
    onCTAClick(button) {
        const mensagensCTA = [
            "Excelente escolha! üéâ",
            "Voc√™ est√° no caminho certo!",
            "Vamos transformar sua carreira!",
            "Sucesso garantido! ‚≠ê"
        ];
        const mensagem = mensagensCTA[Math.floor(Math.random() * mensagensCTA.length)];
        this.mostrarBalao(mensagem, 2000);
        
        this.rastrearInteracao('cta_clicked', {
            button: button.textContent,
            pagina: this.paginaAtual
        });
    }
    
    aoClicar() {
        this.contadorCliques++;
        
        // Adicionar classes de anima√ß√£o
        this.mascoteElement.classList.add('clicado', 'feliz');
        
        // Escolher frase baseada no contexto
        let frase;
        if (this.contadorCliques === 1) {
            frase = "Ol√°! Como posso ajudar voc√™ hoje? üòä";
        } else if (this.contadorCliques % 5 === 0) {
            frase = "J√° clicou " + this.contadorCliques + " vezes! Gosta de mim? ü§ñüíï";
        } else {
            frase = this.obterFraseContextual();
        }
        
        this.mostrarBalao(frase);
        
        // A√ß√£o contextual
        if (this.contadorCliques % 3 === 0) {
            // A cada 3 cliques, sugerir a√ß√£o
            setTimeout(() => {
                if (this.paginaAtual === 'index') {
                    this.mostrarBalao("Que tal conhecer nossos produtos? üõçÔ∏è", 4000);
                } else {
                    this.mostrarBalao("Precisa de ajuda para escolher? ü§î", 4000);
                }
            }, 3000);
        }
        
        // Remover classes ap√≥s anima√ß√£o
        setTimeout(() => {
            this.mascoteElement.classList.remove('clicado', 'feliz');
        }, 500);
        
        // Rastrear clique
        this.rastrearInteracao('mascote_clicked', {
            clique_numero: this.contadorCliques,
            pagina: this.paginaAtual
        });
    }
    
    // Novo sistema de chat
    initializeChat() {
        this.chatHistory = [];
        this.chatExpanded = false;
        this.chatContainer.style.display = 'none';
        
        // Configurar eventos do chat
        this.setupChatEvents();
    }
    
    setupChatEvents() {
        // Toggle do chat
        this.chatToggle.addEventListener('click', () => {
            this.toggleChat();
        });
        
        // Enviar mensagem
        this.chatSend.addEventListener('click', () => {
            this.sendMessage();
        });
        
        // Enter para enviar
        this.chatInput.addEventListener('keypress', (e) => {
            if (e.key === 'Enter') {
                this.sendMessage();
            }
        });
        
        // Bot√µes de perguntas r√°pidas
        this.quickQuestions.addEventListener('click', (e) => {
            if (e.target.classList.contains('quick-btn')) {
                const question = e.target.dataset.question;
                this.handleQuickQuestion(question);
            }
        });
    }
    
    toggleChat() {
        this.chatExpanded = !this.chatExpanded;
        
        if (this.chatExpanded) {
            this.chatContainer.style.display = 'block';
            this.balaoElement.style.display = 'none';
            this.chatToggle.querySelector('.toggle-icon').textContent = '‚àí';
            this.notificationBadge.style.display = 'none';
            this.chatInput.focus();
        } else {
            this.chatContainer.style.display = 'none';
            this.balaoElement.style.display = 'block';
            this.chatToggle.querySelector('.toggle-icon').textContent = '+';
        }
        
        this.rastrearInteracao('chat_toggled', {
            expanded: this.chatExpanded,
            pagina: this.paginaAtual
        });
    }
    
    sendMessage() {
        const message = this.chatInput.value.trim();
        if (!message) return;
        
        // Adicionar mensagem do usu√°rio
        this.addMessage(message, 'user');
        
        // Limpar input
        this.chatInput.value = '';
        
        // Mostrar indicador de digita√ß√£o
        this.showTypingIndicator();
        
        // Processar resposta
        setTimeout(() => {
            this.hideTypingIndicator();
            const response = this.generateResponse(message);
            this.addMessage(response.text, 'bot');
            
            if (response.action) {
                setTimeout(() => {
                    this.executeAction(response.action);
                }, 1000);
            }
        }, 1500);
        
        this.rastrearInteracao('message_sent', {
            message: message,
            pagina: this.paginaAtual
        });
    }
    
    addMessage(text, sender) {
        const messageDiv = document.createElement('div');
        messageDiv.className = `message ${sender}-message`;
        messageDiv.innerHTML = `
            <div class="message-content">${text}</div>
        `;
        
        this.chatMessages.appendChild(messageDiv);
        this.chatMessages.scrollTop = this.chatMessages.scrollHeight;
        
        // Salvar no hist√≥rico
        this.chatHistory.push({
            text: text,
            sender: sender,
            timestamp: new Date()
        });
    }
    
    showTypingIndicator() {
        this.typingIndicator.style.display = 'block';
        this.chatMessages.scrollTop = this.chatMessages.scrollHeight;
    }
    
    hideTypingIndicator() {
        this.typingIndicator.style.display = 'none';
    }
    
    handleQuickQuestion(questionType) {
        const questions = {
            'ebooks': 'üìö Qual eBook √© melhor para mim?',
            'agentes': 'ü§ñ Como funcionam os agentes de IA?',
            'precos': 'üí∞ Quanto custam as mentorias?',
            'iniciante': 'üéØ Sou iniciante, por onde come√ßar?',
            'contato': 'üìû Quero falar com voc√™s'
        };
        
        const questionText = questions[questionType];
        if (questionText) {
            this.addMessage(questionText, 'user');
            
            setTimeout(() => {
                this.showTypingIndicator();
                setTimeout(() => {
                    this.hideTypingIndicator();
                    const response = this.getQuickResponse(questionType);
                    this.addMessage(response.text, 'bot');
                    
                    if (response.action) {
                        setTimeout(() => {
                            this.executeAction(response.action);
                        }, 1000);
                    }
                }, 1000);
            }, 500);
        }
    }
    
    initializeKnowledgeBase() {
        this.knowledgeBase = {
            // eBooks
            ebooks: {
                keywords: ['ebook', 'livro', 'claude', 'landing', 'p√°gina', 'maestro', 'mobile'],
                responses: [
                    {
                        text: "üìö Temos eBooks incr√≠veis! Para iniciantes, recomendo o **Claude Code** (R$ 9,90) - ensina automa√ß√£o com IA. Para quem quer criar p√°ginas que convertem, o **Landing Page** √© perfeito. E para testes mobile, o **Maestro** √© nosso best-seller!",
                        action: { type: 'redirect', url: 'produtos.html#ebooks' }
                    }
                ]
            },
            
            // Agentes IA
            agentes: {
                keywords: ['agente', 'automa√ß√£o', 'ia', 'jira', 'swagger', 'testes'],
                responses: [
                    {
                        text: "ü§ñ Os agentes de IA automatizam suas tarefas repetitivas! Temos o **Agente JIRA** que cria cen√°rios automaticamente, e o **Agente Swagger** que testa APIs sozinho. Eles economizam 75% do seu tempo!",
                        action: { type: 'redirect', url: 'demonstracoes.html' }
                    }
                ]
            },
            
            // Pre√ßos e mentorias
            precos: {
                keywords: ['pre√ßo', 'valor', 'custo', 'mentoria', 'consultoria'],
                responses: [
                    {
                        text: "üí∞ Os eBooks come√ßam em **R$ 9,90**. As mentorias t√™m valores personalizados conforme sua necessidade. A **primeira consulta √© gratuita** para entendermos seu caso!",
                        action: { type: 'contact' }
                    }
                ]
            },
            
            // Iniciantes
            iniciante: {
                keywords: ['iniciante', 'come√ßar', 'primeiro', 'emprego', 'carreira'],
                responses: [
                    {
                        text: "üéØ Para iniciantes, recomendo come√ßar com o eBook **Claude Code** (R$ 9,90) para aprender automa√ß√£o. Depois, o **Maestro para Mobile** te dar√° uma base s√≥lida. Ana e Pablo est√£o aqui para te guiar!",
                        action: { type: 'redirect', url: 'produtos.html#iniciantes' }
                    }
                ]
            },
            
            // Contato
            contato: {
                keywords: ['contato', 'falar', 'whatsapp', 'ajuda', 'suporte'],
                responses: [
                    {
                        text: "üìû Claro! Voc√™ pode falar conosco por:\n‚Ä¢ **WhatsApp**: (81) 98196-9163\n‚Ä¢ **Email**: evelynholanda@gmail.com\n‚Ä¢ **Instagram**: @clubequalidade\n\nA primeira conversa √© sempre gratuita! üòä",
                        action: { type: 'contact' }
                    }
                ]
            }
        };
    }
    
    generateResponse(message) {
        const messageLower = message.toLowerCase();
        
        // Buscar na base de conhecimento
        for (const [category, data] of Object.entries(this.knowledgeBase)) {
            if (data.keywords.some(keyword => messageLower.includes(keyword))) {
                const response = data.responses[Math.floor(Math.random() * data.responses.length)];
                return response;
            }
        }
        
        // Resposta padr√£o
        return {
            text: "Interessante! ü§î Para te ajudar melhor, que tal usar os bot√µes de perguntas r√°pidas acima? Ou me conte mais sobre o que voc√™ precisa em QA e automa√ß√£o!",
            action: null
        };
    }
    
    getQuickResponse(questionType) {
        const responses = {
            ebooks: {
                text: "üìö **Nossos eBooks mais populares:**\n\n‚Ä¢ **Claude Code** (R$ 9,90) - Automa√ß√£o com IA\n‚Ä¢ **Landing Page** (R$ 29,90) - P√°ginas que convertem\n‚Ä¢ **Maestro Mobile** (R$ 49,90) - Testes mobile completo\n\nQual √°rea te interessa mais? Posso explicar qualquer um deles!",
                action: { type: 'continue', message: "Quer saber mais sobre algum eBook espec√≠fico? Digite qual te interessou!" }
            },
            agentes: {
                text: "ü§ñ **Nossos Agentes IA fazem m√°gica:**\n\n‚Ä¢ **Agente JIRA**: L√™ tickets e cria cen√°rios automaticamente\n‚Ä¢ **Agente Swagger**: Testa todas as APIs sem supervis√£o\n‚Ä¢ **Economia de 75% do tempo** em tarefas repetitivas\n\nTem alguma d√∫vida espec√≠fica sobre os agentes?",
                action: { type: 'continue', message: "Para ver demonstra√ß√µes dos agentes, me pergunte sobre um espec√≠fico ou digite 'demonstra√ß√µes'!" }
            },
            precos: {
                text: "üí∞ **Nossos pre√ßos:**\n\n‚Ä¢ **eBooks**: R$ 9,90 a R$ 49,90\n‚Ä¢ **Agentes IA**: Sob consulta (customizados)\n‚Ä¢ **Mentorias**: Valores personalizados\n‚Ä¢ **Primeira consulta**: GRATUITA! üéÅ\n\nQuer saber o pre√ßo de algo espec√≠fico?",
                action: { type: 'continue', message: "Digite qual produto te interessa e te dou mais detalhes sobre pre√ßos!" }
            },
            iniciante: {
                text: "üéØ **Roadmap para iniciantes:**\n\n1Ô∏è‚É£ Comece com **Claude Code** (R$ 9,90)\n2Ô∏è‚É£ Pratique com **Maestro Mobile** \n3Ô∏è‚É£ Agende uma mentoria gratuita\n4Ô∏è‚É£ Ana e Pablo te guiam no resto!\n\n**Sua chave para o primeiro emprego em QA! üóùÔ∏è**",
                action: { type: 'continue', message: "Tem alguma d√∫vida sobre como come√ßar? Posso te ajudar com o primeiro passo!" }
            },
            contato: {
                text: "üìû **Vamos conversar! Escolha a forma:**\n\nüî∏ **WhatsApp**: (81) 98196-9163\nüî∏ **Email**: evelynholanda@gmail.com  \nüî∏ **Instagram**: @clubequalidade\n\n**Primeira conversa sempre gratuita!** ‚òï",
                action: { type: 'contact' }
            }
        };
        
        return responses[questionType] || responses.contato;
    }
    
    executeAction(action) {
        switch(action.type) {
            case 'redirect':
                // Em vez de redirecionar imediatamente, oferecer op√ß√£o
                this.addMessage(`üîó Quer ir para a p√°gina espec√≠fica? <a href="${action.url}" target="_blank" style="color: var(--primary-green); text-decoration: underline;">Clique aqui</a> ou continue conversando comigo!`, 'bot');
                break;
            case 'contact':
                this.addMessage("üí¨ Use os links de contato acima ou clique em qualquer se√ß√£o 'Contato' no site!", 'bot');
                break;
            case 'continue':
                // Apenas adiciona uma mensagem de continua√ß√£o da conversa
                setTimeout(() => {
                    this.addMessage(action.message, 'bot');
                }, 2000);
                break;
        }
    }
    
    acaoPersonalizada() {
        if (this.contadorCliques % 7 === 0) {
            // A cada 7 cliques, abrir produtos ou WhatsApp
            if (this.paginaAtual === 'index') {
                setTimeout(() => {
                    const resposta = confirm("Quer conhecer nossos produtos agora?");
                    if (resposta) {
                        window.location.href = 'produtos.html';
                    }
                }, 2000);
            } else {
                setTimeout(() => {
                    const resposta = confirm("Quer falar conosco no WhatsApp?");
                    if (resposta) {
                        const mensagem = encodeURIComponent("Ol√°! Vim do site e gostaria de saber mais sobre os produtos do Clube Qualidade!");
                        window.open(`https://wa.me/5581981969163?text=${mensagem}`);
                    }
                }, 2000);
            }
        }
    }
    
    aoHover() {
        if (!this.balaoElement.classList.contains('ativo')) {
            const frasesHover = [
                "Clique em mim! üëÜ",
                "Ol√°! Precisa de ajuda?",
                "Sou seu assistente virtual! ü§ñ",
                "Vamos conversar?"
            ];
            const frase = frasesHover[Math.floor(Math.random() * frasesHover.length)];
            this.mostrarBalao(frase, 2000);
        }
        
        this.rastrearInteracao('mascote_hover', {
            pagina: this.paginaAtual
        });
    }
    
    aoSairHover() {
        // Pode implementar a√ß√µes espec√≠ficas ao sair do hover se necess√°rio
    }
    
    mostrarBalao(texto, duracao = null) {
        if (!this.balaoElement) return;
        
        duracao = duracao || this.options.duracaoBalao;
        
        this.balaoElement.textContent = texto;
        this.balaoElement.classList.add('ativo');
        
        // Esconder ap√≥s dura√ß√£o especificada
        clearTimeout(this.timeoutId);
        this.timeoutId = setTimeout(() => {
            this.esconderBalao();
        }, duracao);
    }
    
    esconderBalao() {
        if (this.balaoElement) {
            this.balaoElement.classList.remove('ativo');
        }
    }
    
    obterFraseContextual() {
        const frasesContextuais = this.options.frasesContextuais[this.paginaAtual];
        if (frasesContextuais && frasesContextuais.length > 0) {
            return frasesContextuais[Math.floor(Math.random() * frasesContextuais.length)];
        }
        return this.obterFraseAleatoria();
    }
    
    obterFraseAleatoria() {
        const frases = this.options.frases;
        return frases[Math.floor(Math.random() * frases.length)];
    }
    
    iniciarComportamentoAutomatico() {
        // Mostrar bal√£o inicial ap√≥s 4 segundos (menos intrusivo)
        setTimeout(() => {
            const fraseInicial = this.paginaAtual === 'index' 
                ? "Bem-vindo ao Clube Qualidade! üëã"
                : "Precisa de ajuda para escolher um produto?";
            this.mostrarBalao(fraseInicial);
        }, 4000);
        
        // Bal√£o autom√°tico em intervalos maiores para n√£o ser intrusivo
        this.intervalId = setInterval(() => {
            if (!this.balaoElement.classList.contains('ativo')) {
                const fraseAleatoria = this.obterFraseContextual();
                this.mostrarBalao(fraseAleatoria);
            }
        }, this.options.intervaloBalaoPadrao);
    }
    
    pararComportamentoAutomatico() {
        if (this.intervalId) {
            clearInterval(this.intervalId);
            this.intervalId = null;
        }
    }
    
    // M√©todos p√∫blicos para controle externo
    falar(texto, duracao = null) {
        this.mostrarBalao(texto, duracao);
    }
    
    adicionarFrase(frase) {
        this.options.frases.push(frase);
    }
    
    definirFrases(novasFrases) {
        this.options.frases = novasFrases;
    }
    
    mudarPosicao(novaPosicao) {
        this.options.posicao = novaPosicao;
        this.aplicarPosicionamento();
    }
    
    mostrar() {
        if (this.mascoteElement) {
            this.mascoteElement.style.display = 'block';
        }
    }
    
    esconder() {
        if (this.mascoteElement) {
            this.mascoteElement.style.display = 'none';
        }
    }
    
    destruir() {
        this.pararComportamentoAutomatico();
        clearTimeout(this.timeoutId);
        
        if (this.mascoteElement && this.mascoteElement.parentNode) {
            this.mascoteElement.parentNode.removeChild(this.mascoteElement);
        }
        
        this.isInitialized = false;
        console.log('ü§ñ Mascote Clube Qualidade destru√≠do');
    }
    
    // Analytics e rastreamento
    rastrearInteracao(tipo, dados = {}) {
        const evento = {
            tipo: tipo,
            timestamp: new Date().toISOString(),
            pagina: this.paginaAtual,
            url: window.location.href,
            userAgent: navigator.userAgent,
            ...dados
        };
        
        // Log para debug
        console.log('üìä Intera√ß√£o do mascote:', evento);
        
        // Enviar para Google Analytics se dispon√≠vel
        if (typeof gtag !== 'undefined') {
            gtag('event', tipo, {
                event_category: 'mascote_interacao',
                event_label: this.paginaAtual,
                custom_map: dados
            });
        }
        
        // Callback personalizado se configurado
        if (this.options.analytics && typeof this.options.analytics === 'function') {
            this.options.analytics(evento);
        }
    }
    
    // M√©todo para integra√ß√£o com outras funcionalidades do site
    integrarComSite() {
        // Detectar mudan√ßas de se√ß√£o na p√°gina de produtos
        const observer = new IntersectionObserver((entries) => {
            entries.forEach(entry => {
                if (entry.isIntersecting) {
                    this.onSecaoVisivel(entry.target);
                }
            });
        }, { threshold: 0.5 });
        
        // Observar se√ß√µes se existirem
        const secoes = document.querySelectorAll('.carousel-container, .section-header');
        secoes.forEach(secao => {
            observer.observe(secao);
        });
    }
    
    onSecaoVisivel(secao) {
        const titulo = secao.querySelector('.section-title');
        if (titulo && !this.balaoElement.classList.contains('ativo')) {
            const textoTitulo = titulo.textContent;
            let mensagem = "";
            
            if (textoTitulo.includes('eBooks')) {
                mensagem = "eBooks pr√°ticos a partir de R$ 9,90! üìö";
            } else if (textoTitulo.includes('Agentes')) {
                mensagem = "Agentes IA que automatizam tudo! ü§ñ";
            } else if (textoTitulo.includes('Cursos')) {
                mensagem = "Cursos sob demanda dispon√≠veis! üéì";
            } else if (textoTitulo.includes('Mentoria')) {
                mensagem = "Mentoria personalizada com especialistas! üí°";
            }
            
            if (mensagem) {
                this.mostrarBalao(mensagem);
            }
        }
    }
}

// Configura√ß√£o espec√≠fica do Clube Qualidade
window.mascoteIAConfig = {
    frases: [
        "Ol√°! Sou o assistente do Clube Qualidade! ü§ñ",
        "Ana Evelyn e Pablo s√£o especialistas reconhecidos!",
        "Transforme sua carreira em QA com nossos produtos!",
        "eBooks, Agentes IA e Mentorias dispon√≠veis!",
        "Primeira consulta de mentoria gratuita! üéì",
        "Nossos agentes IA otimizam 75% das suas tarefas!",
        "Pegue sua chave para o primeiro emprego em QA! üóùÔ∏è",
        "Expertise comprovada em Samsung e Ferreira Costa!",
        "Automa√ß√£o inteligente √© nossa especialidade! ‚ö°",
        "Vamos juntos revolucionar sua produtividade!"
    ],
    intervaloBalaoPadrao: 30000, // 30 segundos
    duracaoBalao: 6000, // 6 segundos
    posicao: 'bottom-right',
    analytics: function(evento) {
        // Integra√ß√£o com analytics personalizado se necess√°rio
        console.log('üìà Analytics:', evento);
    }
};

// Fun√ß√£o de inicializa√ß√£o global
window.inicializarMascoteIA = function(options = {}) {
    const configFinal = { ...window.mascoteIAConfig, ...options };
    
    // Aguardar carregamento do DOM
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', () => {
            window.mascoteIA = new MascoteIA(configFinal);
            window.mascoteIA.integrarComSite();
        });
    } else {
        window.mascoteIA = new MascoteIA(configFinal);
        window.mascoteIA.integrarComSite();
    }
    
    return window.mascoteIA;
};

// Auto-inicializa√ß√£o
document.addEventListener('DOMContentLoaded', () => {
    // Verificar se j√° existe uma inst√¢ncia
    if (!window.mascoteIA) {
        window.mascoteIA = new MascoteIA(window.mascoteIAConfig);
        window.mascoteIA.integrarComSite();
    }
});

// Exportar para uso em m√≥dulos
if (typeof module !== 'undefined' && module.exports) {
    module.exports = MascoteIA;
}

// M√©todos globais para controle externo
window.controlarMascote = {
    falar: (texto, duracao) => window.mascoteIA && window.mascoteIA.falar(texto, duracao),
    esconder: () => window.mascoteIA && window.mascoteIA.esconder(),
    mostrar: () => window.mascoteIA && window.mascoteIA.mostrar(),
    destruir: () => window.mascoteIA && window.mascoteIA.destruir()
};